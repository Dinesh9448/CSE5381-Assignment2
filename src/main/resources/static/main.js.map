{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {HttpClient, HttpParams} from '@angular/common/http';\nimport {Component, ViewChild, AfterViewInit} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport { Page } from 'ngx-pagination/dist/pagination-controls.directive';\nimport {merge, Observable, of as observableOf} from 'rxjs';\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\nimport { saveAs } from 'file-saver';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  {\n  chartData: any = [];\n  xAxisLabel: string = '';\n  yAxisLabel: string = '';\n  legendTitle: string = '';\n\n  displayedColumns: string[] = ['time', 'latitude', 'longitude', 'depth', 'mag', 'magType'];\n  exampleDatabase: ExampleHttpDatabase | null;\n  data: EarthQuake[] = [];\n  queryStatistics: Statistics[] = [];\n  filterId: number = 0;\n\n  private url: string = '/earthquake?';\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private _httpClient: HttpClient) {}\n\n  element: string = '_embedded.earthquake';\n\n  ngAfterViewInit() {\n    this.getCountByMag().subscribe(data => {\n      this.chartData = data;\n      this.xAxisLabel = 'Magnitude';\n        this.yAxisLabel = 'no of EarthQuakes';\n        this.legendTitle = 'By Magnitude Chart';\n  });\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient, this.url);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.exampleDatabase!.getEarthQuakeContent(\n            this.sort.active, this.sort.direction, this.paginator.pageIndex);\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.isRateLimitReached = false;\n          this.resultsLength = data.earthQuakes.totalElements;\n          this.queryStatistics = data.queryStatistics;\n\n          return data.earthQuakes.content;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          // Catch if the  API has reached its rate limit. Return empty data.\n          this.isRateLimitReached = true;\n          return observableOf([]);\n        })\n      ).subscribe(data => this.data = data);\n  }\n\n  onSelected(filterId: number): void {\n    console.log(`not yet implemented` + filterId);\n    this.filterId = filterId;\n    if(0==filterId){\n      this.url = '/earthquake?';\n      this.queryStatistics = [];\n      this.ngAfterViewInit();\n    }\n  }\n  magGreater(mag: number): void {\n    this.url = `/earthquake/findByMagGreaterThanEqual?mag=${mag}&`;\n    this.exampleDatabase = null;\n    this.data = [];\n    this.queryStatistics = [];\n    this.ngAfterViewInit();\n  }\n  magAndTime(minMag: string, maxMag:string, minTime:string, maxTime:string): void {\n    this.url = `/earthquake/findByMagBetweenAndAndTimeBetween?startMag=${minMag}&endMag=${maxMag}&startDate=${minTime}T00:00:00.000Z&endDate=${maxTime}T00:00:00.000Z&`;\n    this.exampleDatabase = null;\n    this.data = [];\n    this.queryStatistics = [];\n    this.ngAfterViewInit();\n  }\n\n  distanceFrom(latitude:string, longitude:string, distance:string): void {\n    this.url = `/earthquake/findEarthQuakesByDistance?latitude=${latitude}&longitude=${longitude}&distance=${distance}&`;\n    this.exampleDatabase = null;\n    this.data = [];\n    this.queryStatistics = [];\n    this.paginator.pageIndex = 0;\n\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient, this.url);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.exampleDatabase!.getEarthQuakeContent(\n            this.sort.active, this.sort.direction, this.paginator.pageIndex);\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.isRateLimitReached = false;\n          this.resultsLength = data.earthQuakes.totalElements;\n          this.queryStatistics = data.queryStatistics;\n\n          return data.earthQuakes.content;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          // Catch if the  API has reached its rate limit. Return empty data.\n          this.isRateLimitReached = true;\n          return observableOf([]);\n        })\n      ).subscribe(data => this.data = data);\n  }\n\n  myForm = new FormGroup({\n    name: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    file: new FormControl('', [Validators.required]),\n    fileSource: new FormControl('', [Validators.required])\n  });\n\n  myForm2 = new FormGroup({\n    name: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    file: new FormControl('', [Validators.required]),\n    fileSource: new FormControl('', [Validators.required])\n  });\n\n  get f(){\n    return this.myForm.controls;\n  }\n\n  onFileChange(event) {\n\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.myForm.patchValue({\n        fileSource: file\n      });\n    }\n  }\n\n  submit(message: string){\n    const formData = new FormData();\n    formData.append('file', this.myForm.get('fileSource').value);\n    formData.append('message', message);\n\n    this.exampleDatabase.downloadFile(formData)\n      .subscribe(res => {\n        console.log(this.myForm.get('fileSource').value.name);\n        const fileName = this.myForm.get('fileSource').value.name;\n        saveAs(new Blob([res], {type: 'application/text'}), fileName.substring(0, fileName.indexOf('.txt')) + 'WithHiddenMsg.txt');\n      })\n  }\n\n  retrieveMessage(){\n    const formData = new FormData();\n    formData.append('file', this.myForm.get('fileSource').value);\n\n    this.exampleDatabase.retrieveSecretMessage(formData)\n      .subscribe(res => {\n        alert('Secret Message : ' + res);\n      })\n  }\n  getCountByMag(){\n    const requestUrl = 'earthquake/countByMag';\n    return this._httpClient.get(requestUrl);\n  }\n  getCountByLocation(){\n    const requestUrl = 'earthquake/countByLocationSource';\n    return this._httpClient.get(requestUrl);\n  }\n  getCountByTime(){\n    const requestUrl = 'earthquake/countByTime';\n    return this._httpClient.get(requestUrl);\n  }\n  onSelectChartData(filterId: number){\n    if(0==filterId){\n      this.getCountByMag().subscribe(data => {\n        this.chartData = data;\n        this.xAxisLabel = 'Magnitude';\n        this.yAxisLabel = 'no of EarthQuakes';\n        this.legendTitle = 'By Magnitude Chart';\n      });\n    }else if(1==filterId){\n      this.getCountByLocation().subscribe(data => {\n        this.chartData = data;\n        this.xAxisLabel = 'Location Source';\n        this.yAxisLabel = 'no of EarthQuakes';\n        this.legendTitle = 'By Location Source Chart';\n      });\n    }else if(2==filterId){\n      this.getCountByTime().subscribe(data => {\n        this.chartData = data;\n        this.xAxisLabel = 'Location Source';\n        this.yAxisLabel = 'no of EarthQuakes';\n        this.legendTitle = 'By Location Source Chart';\n      });\n    }\n  }\n  onSelectChartType(filterId: number){\n    this.chartType = filterId;\n  }\n  chartType: number=0\n\n}\n\nexport interface EarthQuakeAPI{\n  _embedded: EarthQuakeArray;\n  page: PageDtl;\n}\nexport interface EarthQuakeArray{\n  earthquake: EarthQuake[];\n  queryStatistics: Statistics[];\n}\n\nexport interface Statistics{\n  query: String;\n  executionTime: number;\n}\n\nexport interface PageDtl{\n  size: number;\n  totalElements: number;\n  totalPages: number;\n  number: number;\n}\n\nexport interface EarthQuake{\n  time: string;\n  latitude: number;\n  longitude: number;\n  depth: number;\n  mag?: number;\n  magType: string;\n  nst: number;\n  gap: number;\n  dmin: number;\n  rms: number;\n  net?: string;\n  id?: string;\n  updated: string;\n  place: string;\n  type: string;\n  horizontalError: number;\n  depthError: number;\n  magError: number;\n  magNst: string;\n  status: string;\n  locationSource: string;\n  magSource: string;\n}\n\nexport interface EarthQuakeContent {\n  earthQuakes: EarthQuakeBody;\n  queryStatistics: Statistics[];\n}\n\nexport interface EarthQuakeBody extends PageDtl{\n  content: EarthQuake[];\n}\n\nexport interface ChartData{\n  name: string;\n  value: number;\n}\n\nexport interface ChartArray{\n  chartArray: ChartData[];\n}\n\nexport class ExampleHttpDatabase {\n  constructor(private _httpClient: HttpClient, private href: string) {}\n\n  getEarthQuakeDetails(sort: string, order: string, page: number): Observable<EarthQuakeAPI> {\n    //const href = 'http://localhost:808/earthquake';\n    const requestUrl =\n        `${this.href}sort=${sort},${order}&page=${page}`;\n\n    return this._httpClient.get<EarthQuakeAPI>(requestUrl);\n  }\n\n  getEarthQuakeContent(sort: string, order: string, page: number): Observable<EarthQuakeContent> {\n    const requestUrl =\n        `${this.href}sort=${sort},${order}&page=${page}`;\n\n    return this._httpClient.get<EarthQuakeContent>(requestUrl);\n  }\n\n  downloadFile(formData: FormData) {\n    return this._httpClient.post('steganography/uploadFile', formData, {\n      responseType: 'arraybuffer'\n    });\n  }\n\n  retrieveSecretMessage(formData: FormData) {\n    return this._httpClient.post('steganography/retrieveMessage', formData);\n  }\n\n}\n","<div class=\"page-header\">\n\t<hr>\n\t<h1>Steganography Tool </h1>\n</div>\n<!--\n<div class=\"card-body\"\n       *ngIf=\"data\">\n    <div class=\"container\">\n      <div class=\"row justify-content-between\">\n        <div class=\"col-3\">\n          <select class=\"form-control\"\n                  (change)=\"onSelected($event.target.value)\">\n            <option value=\"0\">- Display All -</option>\n\t\t\t<option value=\"1\">- Magnitude Greater Than -</option>\n\t\t\t<option value=\"2\">- Magnitude between and Time between -</option>\n\t\t\t<option value=\"3\">- EarthQuakes By Distance -</option>\n          </select>\n        </div>\n      </div>\n\t</div>\n</div>\n<div class=\"card-body\"\n       *ngIf=\"filterId != 0\">\n\t   <div class=\"container\">\n\t\t<div class=\"row justify-content-between\">\n\t\t\t<div class=\"md-form\" *ngIf=\"filterId == 1\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm\">\n\t\t\t\t<input #textbox mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t\t<label for=\"form1\" class=\"\">Magnitude Greater Than</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\" (click)=\"magGreater(textbox.value)\">Search</button>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"md-form\" *ngIf=\"filterId == 2\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm\">\n\t\t\t\t<input #minMag mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t\t<label for=\"form1\" class=\"\">Min Magnitude </label>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm\">\n\t\t\t\t<input #maxMag mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t\t<label for=\"form1\" class=\"\">Max Magnitude </label>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm\">\n\t\t\t\t<input #minTime mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t\t<label for=\"form1\" class=\"\">Time From</label>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm\">\n\t\t\t\t<input #maxTime mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t\t<label for=\"form1\" class=\"\">Time To</label>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm\">\n\t\t\t\t<button type=\"button\" class=\"btn btn-primary\" (click)=\"magAndTime(minMag.value, maxMag.value, minTime.value, maxTime.value)\">Search</button>\n\t\t\t</div>\n\n\t\t\t</div>\n\t\t  </div>\n\t\t  <div class=\"md-form\" *ngIf=\"filterId == 3\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-sm\">\n\t\t\t<input #latitude mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t<label for=\"form1\" class=\"\">Latitude</label>\n\t\t</div>\n\t\t<div class=\"col-sm\">\n\t\t\t<input #longitude mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t<label for=\"form1\" class=\"\">Longitude</label>\n\t\t</div>\n\t\t<div class=\"col-sm\">\n\t\t\t<input #distance mdbInput type=\"text\" id=\"form1\" class=\"form-control\">\n\t\t\t<label for=\"form1\" class=\"\">Distance</label>\n\t\t</div>\n\t\t<div class=\"col-sm\">\n\t\t\t<button type=\"button\" class=\"btn btn-primary\" (click)=\"distanceFrom(latitude.value, longitude.value, distance.value)\">Search</button>\n\t\t</div>\n\n\t\t</div>\n\t  </div>\n\t\t</div>\n</div>\n</div>\n<div class=\"example-container mat-elevation-z8\">\n\t<div class=\"example-loading-shade\"\n\t\t *ngIf=\"isLoadingResults || isRateLimitReached\">\n\t  <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n\t  <div class=\"example-rate-limit-reached\" *ngIf=\"isRateLimitReached\">\n\t\tEarthQuake API rate limit has been reached. It will be reset in one minute.\n\t  </div>\n\t</div>\n\n\n\t<div class=\"example-table-container\">\n\n\t  <table mat-table [dataSource]=\"data\" class=\"example-table\"\n\t\t\t matSort matSortActive=\"time\" matSortDisableClear matSortDirection=\"desc\">\n\t\t&lt;!&ndash; Number Column &ndash;&gt;\n\t\t<ng-container matColumnDef=\"latitude\">\n\t\t  <th mat-header-cell *matHeaderCellDef>latitude</th>\n\t\t  <td mat-cell *matCellDef=\"let row\">{{row.latitude}}</td>\n\t\t</ng-container>\n\n\t\t&lt;!&ndash; Title Column &ndash;&gt;\n\t\t<ng-container matColumnDef=\"longitude\">\n\t\t  <th mat-header-cell *matHeaderCellDef>longitude</th>\n\t\t  <td mat-cell *matCellDef=\"let row\">{{row.longitude}}</td>\n\t\t</ng-container>\n\n\t\t&lt;!&ndash; State Column &ndash;&gt;\n\t\t<ng-container matColumnDef=\"depth\">\n\t\t  <th mat-header-cell *matHeaderCellDef>depth</th>\n\t\t  <td mat-cell *matCellDef=\"let row\">{{row.depth}}</td>\n\t\t</ng-container>\n\n\t\t<ng-container matColumnDef=\"mag\">\n\t\t\t<th mat-header-cell *matHeaderCellDef>mag</th>\n\t\t\t<td mat-cell *matCellDef=\"let row\">{{row.mag}}</td>\n\t\t  </ng-container>\n\n\t\t  <ng-container matColumnDef=\"magType\">\n\t\t\t<th mat-header-cell *matHeaderCellDef>magType</th>\n\t\t\t<td mat-cell *matCellDef=\"let row\">{{row.magType}}</td>\n\t\t  </ng-container>\n\n\t\t&lt;!&ndash; Created Column &ndash;&gt;\n\t\t<ng-container matColumnDef=\"time\">\n\t\t  <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n\t\t\tTime\n\t\t  </th>\n\t\t  <td mat-cell *matCellDef=\"let row\">{{row.time | date}}</td>\n\t\t</ng-container>\n\n\t\t<tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n\t\t<tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\t  </table>\n\t</div>\n\n\t<mat-paginator [length]=\"resultsLength\" [pageSize]=\"20\"></mat-paginator>\n\n\n  </div>\n  <br>\n  <br>\n  <form [formGroup]=\"myForm\" (ngSubmit)=\"submit()\">\n\n    <div class=\"form-group\">\n        <label for=\"file\">EarthQuake CSV File Upload</label>\n        <input\n            formControlName=\"file\"\n            id=\"file\"\n            type=\"file\"\n            class=\"form-control\"\n            (change)=\"onFileChange($event)\">\n        <div *ngIf=\"f.file.touched && f.file.invalid\" class=\"alert alert-danger\">\n            <div *ngIf=\"f.file.errors.required\">File is required.</div>\n        </div>\n    </div>\n    <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n\n</form>\n\n<br>\n<br>\n<div class=\"card\" *ngFor=\"let content of queryStatistics; let i = index\">\n  <div class=\"card-header\">\n    Query{{i+1}}\n  </div>\n  <div class=\"card-body\">\n    <blockquote class=\"blockquote mb-0\">\n      <p>{{content.query}}</p>\n      <footer class=\"blockquote-footer\">Query Execution Time: <cite title=\"Source Title\">{{content.executionTime}} MilliSeconds</cite></footer>\n    </blockquote>\n  </div>\n</div>\n-->\n<!--<div class=\"card-body\">\n    <div class=\"container\">\n      <div class=\"row justify-content-between\">\n        <div class=\"col-4\">\n          <select class=\"form-control\"\n                  (change)=\"onSelectChartData($event.target.value)\">\n            <option value=\"0\">- By Magnitude -</option>\n\t\t\t      <option value=\"1\">- By LocationSource -</option>\n            <option value=\"2\">- By Date -</option>\n          </select>\n        </div>\n\t\t<div class=\"col-4\">\n\t\t\t<select class=\"form-control\"\n\t\t\t\t\t(change)=\"onSelectChartType($event.target.value)\">\n\t\t\t  <option value=\"0\">- Bar Chart -</option>\n\t\t\t  <option value=\"1\">- Pie Chart -</option>\n\t\t\t</select>\n\t\t  </div>\n      </div>\n\t</div>\n</div>\n\n<div class=\"card-body\"\n       *ngIf=\"chartType == 0\">\n<ngx-charts-bar-vertical\n    [view]=\"[1500,600]\"\n    [results]=\"chartData\"\n    [xAxisLabel]=\"xAxisLabel\"\n    [legendTitle]=\"legendTitle\"\n    [yAxisLabel]=\"yAxisLabel\"\n    [legend]=\"true\"\n    [showXAxisLabel]=\"true\"\n    [showYAxisLabel]=\"true\"\n    [xAxis]=\"true\"\n    [yAxis]=\"true\"\n    [gradient]=\"true\">\n</ngx-charts-bar-vertical>\n</div>\n<div class=\"card-body\"\n       *ngIf=\"chartType == 1\">\n<ngx-charts-pie-chart\n  [results]=\"chartData\"\n  [legend]=\"true\"\n  [legendTitle]=\"legendTitle\"\n  [view]=\"[1500,600]\"\n  [labels]=\"true\" >\n</ngx-charts-pie-chart>\n</div>-->\n\n<br>\n<br>\n<h3>Write Secret message</h3>\n<form [formGroup]=\"myForm\" (ngSubmit)=\"submit(message.value)\">\n\n  <div class=\"form-group\">\n    <label for=\"file\">Carrier File</label>\n    <input\n      formControlName=\"file\"\n      id=\"file\"\n      type=\"file\"\n      class=\"form-control\"\n      (change)=\"onFileChange($event)\">\n    <div *ngIf=\"f.file.touched && f.file.invalid\" class=\"alert alert-danger\">\n      <div *ngIf=\"f.file.errors.required\">File is required.</div>\n    </div>\n    <label for=\"message\">Hide Message</label>\n    <input\n      #message\n      formControlName=\"message\"\n      id=\"message\"\n      type=\"text\"\n      class=\"form-control\">\n  </div>\n  <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n\n</form>\n\n<br>\n<br>\n<h3>Read Secret message</h3>\n<form [formGroup]=\"myForm2\" (ngSubmit)=\"retrieveMessage()\">\n\n  <div class=\"form-group\">\n    <label for=\"file\">Carrier File</label>\n    <input\n      formControlName=\"file\"\n      id=\"file\"\n      type=\"file\"\n      class=\"form-control\"\n      (change)=\"onFileChange($event)\">\n    <div *ngIf=\"f.file.touched && f.file.invalid\" class=\"alert alert-danger\">\n      <div *ngIf=\"f.file.errors.required\">File is required.</div>\n    </div>\n  </div>\n  <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n\n</form>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { NgxChartsModule }from '@swimlane/ngx-charts';\n\n@NgModule({\n  imports:      [BrowserModule, FormsModule, NgxPaginationModule, AppRoutingModule, BrowserAnimationsModule, MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    NgxChartsModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}